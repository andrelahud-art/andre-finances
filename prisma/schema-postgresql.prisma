// This is your Prisma schema file for PRODUCTION (PostgreSQL/Supabase)
// Use this schema when deploying to Vercel

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts         Account[]
  transactions     Transaction[]
  categories       Category[]
  assets           Asset[]
  debts            Debt[]
  budgets          Budget[]
  goals            Goal[]
  inventoryItems   InventoryItem[]
  debtSchedules    DebtSchedule[]
  creditCards      CreditCard[]

  @@map("users")
}

model Account {
  id        String   @id @default(cuid())
  name      String
  type      String
  currency  String   @default("MXN")
  balance   Decimal  @default(0) @db.Decimal(12, 2)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(12, 2)
  description String
  type        String // 'income' | 'expense' | 'transfer'
  date        DateTime
  accountId   String?
  categoryId  String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account?  @relation(fields: [accountId], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String?
  icon      String?
  type      String // 'income' | 'expense'
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Asset {
  id           String   @id @default(cuid())
  name         String
  type         String
  value        Decimal  @db.Decimal(12, 2)
  purchaseDate DateTime?
  description  String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model Debt {
  id            String   @id @default(cuid())
  name          String
  totalAmount   Decimal  @db.Decimal(12, 2)
  remainingAmount Decimal @db.Decimal(12, 2)
  interestRate  Decimal? @db.Decimal(5, 2)
  dueDate       DateTime?
  type          String
  description   String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules DebtSchedule[]

  @@map("debts")
}

model Budget {
  id         String   @id @default(cuid())
  name       String
  amount     Decimal  @db.Decimal(12, 2)
  period     String // 'monthly' | 'yearly'
  categoryId String?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("budgets")
}

model Goal {
  id          String   @id @default(cuid())
  name        String
  targetAmount Decimal @db.Decimal(12, 2)
  currentAmount Decimal @default(0) @db.Decimal(12, 2)
  targetDate  DateTime?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  quantity    Int      @default(0)
  unitPrice   Decimal? @db.Decimal(12, 2)
  totalValue  Decimal? @db.Decimal(12, 2)
  category    String?
  location    String?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inventory_items")
}

model DebtSchedule {
  id          String   @id @default(cuid())
  debtId      String
  amount      Decimal  @db.Decimal(12, 2)
  dueDate     DateTime
  paid        Boolean  @default(false)
  paidDate    DateTime?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)

  @@map("debt_schedules")
}

model CreditCard {
  id          String   @id @default(cuid())
  name        String
  limit       Decimal  @db.Decimal(12, 2)
  balance     Decimal  @default(0) @db.Decimal(12, 2)
  dueDate     DateTime?
  interestRate Decimal? @db.Decimal(5, 2)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_cards")
}