// Prisma Schema para André Finance
// Database: SQLite (Desarrollo local - TODO FUNCIONAL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============= USUARIO =============
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  transactions  Transaction[]
  categories    Category[]
  assets        Asset[]
  debts         Debt[]
  budgets       Budget[]
  goals         Goal[]
  inventoryItems InventoryItem[]
}

// ============= CUENTAS =============
model Account {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String   // CHECKING|SAVINGS|INVESTMENT|OTHER
  currency  String   @default("MXN")
  balance   Float    @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@index([isActive])
}

// ============= TARJETAS DE CRÉDITO =============
model CreditCard {
  id             String   @id @default(cuid())
  userId         String
  name           String
  creditLimit    Float
  currentBalance Float    @default(0)
  dueDate        DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

// ============= CATEGORÍAS =============
model Category {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String   // INCOME|EXPENSE|TRANSFER
  color     String?
  icon      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@index([userId])
  @@index([type])
  @@index([isActive])
}

// ============= TRANSACCIONES =============
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  categoryId  String?
  date        DateTime
  amount      Float
  type        String   // INCOME|EXPENSE|TRANSFER|ADJUSTMENT
  description String?
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
  @@index([type])
}

// ============= DEUDAS A LARGO PLAZO =============
model Debt {
  id              String   @id @default(cuid())
  userId          String
  name            String
  type            String   // LOAN|MORTGAGE|FINANCING|OTHER
  currentBalance  Float
  originalAmount  Float
  interestRate    Float?
  monthlyPayment  Float
  remainingMonths Int
  startDate       DateTime
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Campos adicionales para compatibilidad con APIs
  principal       Float? // Alias para currentBalance
  rateAnnual      Float? // Alias para interestRate
  termMonths      Int?   // Alias para remainingMonths

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules DebtSchedule[]

  @@index([userId])
}

// ============= ACTIVOS =============
model Asset {
  id           String   @id @default(cuid())
  userId       String
  name         String
  type         String   // VEHICLE|EQUIPMENT|PROPERTY|OTHER
  originalCost Float
  currentValue Float
  purchaseDate DateTime
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

// ============= PRESUPUESTOS =============
model Budget {
  id           String   @id @default(cuid())
  userId       String
  categoryId   String
  monthlyLimit Float
  currentSpent Float    @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([isActive])
}

// ============= METAS FINANCIERAS =============
model Goal {
  id           String   @id @default(cuid())
  userId       String
  name         String
  targetAmount Float
  currentAmount Float   @default(0)
  targetDate   DateTime
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
}

// ============= INVENTARIO =============
model InventoryItem {
  id               String   @id @default(cuid())
  userId           String
  name             String
  sku              String?
  quantity         Int      @default(0)
  costAverage      Float
  valuationMethod  String   @default("AVERAGE") // AVERAGE|FIFO|LIFO
  type             String   @default("PRODUCT") // PRODUCT|MATERIAL|SERVICE
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sku])
}

// ============= CRONOGRAMA DE DEUDAS =============
model DebtSchedule {
  id           String   @id @default(cuid())
  debtId       String
  dueDate      DateTime
  principalDue Float
  interestDue  Float
  totalDue     Float
  status       String   @default("PENDING") // PENDING|PAID|OVERDUE
  paidDate     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)

  @@index([debtId])
  @@index([dueDate])
  @@index([status])
}